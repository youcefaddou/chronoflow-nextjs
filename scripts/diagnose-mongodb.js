#!/usr/bin/env node
/**
 * Script de diagnostic pour v√©rifier la configuration MongoDB
 */

import dotenv from 'dotenv'

// Charger les variables d'environnement
dotenv.config({ path: '.env.local' })
dotenv.config({ path: '.env' })

console.log('Diagnostic de la configuration MongoDB:')
console.log('=====================================')

console.log('NODE_ENV:', process.env.NODE_ENV || 'non d√©fini')
console.log('MONGODB_URI:', process.env.MONGODB_URI ? 'd√©fini (***masqu√©***)' : 'NON D√âFINI')

if (!process.env.MONGODB_URI) {
  console.log('\n‚ùå MONGODB_URI n\'est pas d√©fini!')
  console.log('üí° Solutions:')
  console.log('   1. Cr√©er un fichier .env.local avec MONGODB_URI=votre_uri_mongodb')
  console.log('   2. Ou d√©finir MONGODB_URI dans vos variables d\'environnement syst√®me')
  console.log('   3. V√©rifier que le fichier .env.local est √† la racine du projet')
} else {
  console.log('‚úÖ MONGODB_URI est d√©fini')
  
  // Test basique de connexion
  try {
    const { default: mongoose } = await import('mongoose')
    
    console.log('\nüîó Test de connexion MongoDB...')
    await mongoose.connect(process.env.MONGODB_URI)
    console.log('‚úÖ Connexion MongoDB r√©ussie!')
    
    await mongoose.connection.close()
    console.log('‚úÖ Connexion ferm√©e proprement')
    
  } catch (error) {
    console.log('‚ùå Erreur de connexion MongoDB:', error.message)
  }
}

console.log('\nFichiers .env pr√©sents:')
import { existsSync } from 'fs'
console.log('.env.local:', existsSync('.env.local') ? '‚úÖ existe' : '‚ùå n\'existe pas')
console.log('.env:', existsSync('.env') ? '‚úÖ existe' : '‚ùå n\'existe pas')
console.log('.env.example:', existsSync('.env.example') ? '‚úÖ existe' : '‚ùå n\'existe pas')
